"""
===========================================================
      Factor vs Credit Spread Sensitivity Analysis
===========================================================

INSTRUCTIONS:

1. Place this notebook and your Bloomberg CSV file in the same folder:
       Credit Analysis/
       ‚îú‚îÄ‚îÄ Credit_Analysis.ipynb
       ‚îî‚îÄ‚îÄ factors_credit.csv

2. Your CSV must include daily levels with these columns:

   | Date | Factor_1 | Factor_2 | ... | ITRX_MAIN | ITRX_XOVER |

3. Save as: factors_credit.csv

4. This script will:
   ‚Ä¢ Compute daily returns
   ‚Ä¢ Run regressions vs iTraxx Main and XOver
   ‚Ä¢ Show correlation, beta, and R¬≤
   ‚Ä¢ Plot relationships

===========================================================
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import statsmodels.api as sm

# === Load the Bloomberg CSV ===
folder = os.path.dirname(os.path.abspath(__file__)) if "__file__" in globals() else os.getcwd()
file_path = os.path.join(folder, "factors_credit.csv")

df = pd.read_csv(file_path)
df.columns = df.columns.str.strip()
df["Date"] = pd.to_datetime(df["Date"])
df.set_index("Date", inplace=True)
df = df.sort_index()

print(f"‚úÖ Loaded data with {df.shape[0]} rows and {df.shape[1]} columns")

# === Compute daily percentage returns ===
returns = df.pct_change().dropna()

# === Identify factor columns (everything except the iTraxx columns) ===
itraxx_cols = ["ITRX_MAIN", "ITRX_XOVER"]
factor_cols = [c for c in returns.columns if c not in itraxx_cols]

print("\nAnalyzing factors:")
for f in factor_cols:
    print(f" ‚Ä¢ {f}")

# === Helper function: run regression and return summary ===
def run_regression(y, x):
    X = sm.add_constant(x)  # Adds intercept
    model = sm.OLS(y, X).fit()
    return {
        "Beta": model.params[1],
        "Alpha": model.params[0],
        "R¬≤": model.rsquared,
        "t-stat": model.tvalues[1],
        "p-value": model.pvalues[1],
        "Corr": np.corrcoef(y, x)[0, 1]
    }

# === Run regressions ===
results = []

for factor in factor_cols:
    for spread in itraxx_cols:
        reg = run_regression(returns[factor], returns[spread])
        reg["Factor"] = factor
        reg["Credit_Spread"] = spread
        results.append(reg)

results_df = pd.DataFrame(results)[["Factor", "Credit_Spread", "Beta", "R¬≤", "Corr", "t-stat", "p-value", "Alpha"]]

# === Display summary ===
print("\n=== Regression Results (Factor vs Credit) ===\n")
print(results_df.round(3))

# === Save output ===
output_file = os.path.join(folder, "factor_credit_results.csv")
results_df.to_csv(output_file, index=False)
print(f"\n‚úÖ Saved detailed results to: {output_file}")

# === Visualization ===
for factor in factor_cols:
    for spread in itraxx_cols:
        plt.figure(figsize=(6,4))
        plt.scatter(returns[spread], returns[factor], alpha=0.5)
        plt.xlabel(f"{spread} Daily Return")
        plt.ylabel(f"{factor} Daily Return")
        plt.title(f"{factor} vs {spread}\nBeta: {results_df[(results_df['Factor']==factor)&(results_df['Credit_Spread']==spread)]['Beta'].values[0]:.2f}")
        plt.grid(True)
        plt.show()

"""
===========================================================
            PFIC ETF Cross-Check & Dividend Impact
===========================================================

Welcome! This notebook helps you find whether likely PFIC
companies appear in ETFs you're tracking, and whether those
ETFs have seen dividend changes ‚Äî which could hint at
future deletions or basis trade opportunities.

-----------------------------------------------------------
üß≠  HOW TO USE THIS:
-----------------------------------------------------------

1Ô∏è‚É£ FILES YOU NEED (from Bloomberg):

(a) bloomberg_pfic.csv
   This is your PFIC screening input.
   You already have this from earlier.
   It should include:
       Ticker, Company Name, Sector,
       Market Cap, Total Revenue,
       Investment Income, Total Assets, Investment Assets

(b) etf_holdings.csv
   This contains the ETF constituents.
   You can export this from Bloomberg by typing:
       <ETF Ticker>  HDS <GO>
   and then ‚ÄúExport to Excel‚Äù.
   Format the CSV like this:
       ETF Ticker, ETF Name, Constituent Ticker, Constituent Name, Weight (%)

(c) (Optional) etf_dividends.csv
   You can export this using:
       <ETF Ticker>  DVD <GO>
   Include:
       ETF Ticker, ETF Name, Dividend Yield (12M), Dividend Change (YoY)

2Ô∏è‚É£ Place all files in the SAME folder as your notebook.
   Example:
       PFIC Screen/
       ‚îú‚îÄ‚îÄ PFIC_Screener.ipynb
       ‚îú‚îÄ‚îÄ bloomberg_pfic.csv
       ‚îú‚îÄ‚îÄ etf_holdings.csv
       ‚îî‚îÄ‚îÄ etf_dividends.csv   (optional)

3Ô∏è‚É£ Run this cell in Jupyter.

-----------------------------------------------------------
üí°  WHAT IT DOES:
-----------------------------------------------------------

‚Ä¢ Loads your PFIC company list
‚Ä¢ Calculates which companies look like PFICs
‚Ä¢ Loads ETF holdings and checks if any PFICs are held
‚Ä¢ Calculates total PFIC weight per ETF
‚Ä¢ (Optionally) Adds dividend data to compare
‚Ä¢ Displays results in tables and plots

-----------------------------------------------------------
‚öôÔ∏è  OUTPUT:
-----------------------------------------------------------

‚úÖ Summary table of PFIC exposure per ETF
‚úÖ Optional correlation of PFIC exposure vs dividend change
‚úÖ Plots for easy visual analysis
‚úÖ Trade insight: which ETFs might face deletions or basis widening
===========================================================
"""

# === IMPORT REQUIRED PACKAGES ===
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt

# === STEP 1: LOAD YOUR FILES ===
pfic_file = "bloomberg_pfic.csv"   # PFIC screening data
etf_file = "etf_holdings.csv"      # ETF holdings data
div_file = "etf_dividends.csv"     # (Optional) ETF dividend data

# Check all files exist before proceeding
for f in [pfic_file, etf_file]:
    if not os.path.exists(f):
        raise FileNotFoundError(f"‚ùå Could not find '{f}'. Please make sure it‚Äôs in the same folder as this notebook.")

print("‚úÖ All required files found!\n")

# === STEP 2: LOAD AND CLEAN PFIC DATA ===
df = pd.read_csv(pfic_file)
df.columns = df.columns.str.strip()

# Make sure the key numeric columns are numbers
for col in ["Total Revenue", "Investment Income", "Total Assets", "Investment Assets"]:
    df[col] = (
        df[col]
        .astype(str)
        .str.replace(",", "", regex=False)
        .str.replace("$", "", regex=False)
        .replace("nan", np.nan)
        .astype(float)
    )

# Calculate ratios
df["Passive Income %"] = df["Investment Income"] / df["Total Revenue"]
df["Passive Asset %"] = df["Investment Assets"] / df["Total Assets"]

# Define thresholds (PFIC test)
INCOME_THRESHOLD = 0.75
ASSET_THRESHOLD = 0.50

# Mark companies likely PFIC
df["Likely PFIC"] = (
    (df["Passive Income %"] >= INCOME_THRESHOLD) |
    (df["Passive Asset %"] >= ASSET_THRESHOLD)
)

# Extract only PFIC tickers
pfic_list = df[df["Likely PFIC"]]["Ticker"].unique()
print(f"üìä {len(pfic_list)} likely PFIC companies identified.\n")

# === STEP 3: LOAD ETF HOLDINGS DATA ===
etf = pd.read_csv(etf_file)
etf.columns = etf.columns.str.strip()

# Clean up ticker formats
etf["Constituent Ticker"] = etf["Constituent Ticker"].astype(str).str.upper().str.strip()
df["Ticker"] = df["Ticker"].astype(str).str.upper().str.strip()

# Merge ETF holdings with PFIC list
merged = etf.merge(
    df[["Ticker", "Company Name", "Likely PFIC"]],
    left_on="Constituent Ticker",
    right_on="Ticker",
    how="left"
)

# If a match was found, mark it
merged["PFIC Exposure"] = merged["Likely PFIC"].fillna(False)

# === STEP 4: ETF-LEVEL SUMMARY ===
etf_summary = (
    merged.groupby(["ETF Ticker", "ETF Name"])
    .agg(
        Total_Constituents=("Constituent Ticker", "count"),
        PFIC_Count=("PFIC Exposure", "sum"),
        PFIC_Weight=("Weight (%)", lambda x: np.sum(x[merged.loc[x.index, "PFIC Exposure"]])),
        Total_Weight=("Weight (%)", "sum")
    )
    .reset_index()
)

# Calculate PFIC exposure as % of total ETF
etf_summary["PFIC Weight %"] = etf_summary["PFIC_Weight"] / etf_summary["Total_Weight"] * 100

print("=== ETF PFIC Exposure Summary ===")
display(etf_summary)

# === STEP 5: OPTIONAL DIVIDEND DATA MERGE ===
if os.path.exists(div_file):
    div = pd.read_csv(div_file)
    div.columns = div.columns.str.strip()
    etf_summary = etf_summary.merge(div, on=["ETF Ticker", "ETF Name"], how="left")

    print("\n=== ETF Dividend + PFIC Exposure ===")
    display(etf_summary[["ETF Ticker", "ETF Name", "PFIC Weight %", "Dividend Yield (12M)", "Dividend Change (YoY)"]])

    # === VISUAL: PFIC Exposure vs Dividend Change ===
    plt.figure(figsize=(8,6))
    plt.scatter(etf_summary["PFIC Weight %"], etf_summary["Dividend Change (YoY)"], color='purple')
    plt.xlabel("PFIC Weight in ETF (%)")
    plt.ylabel("Dividend Change (YoY)")
    plt.title("PFIC Exposure vs Dividend Change (ETF Level)")
    plt.grid(True)
    plt.show()
else:
    print("\n‚ö†Ô∏è No dividend file found ‚Äî skipping dividend correlation.\n")

# === STEP 6: INTERPRETATION HELP ===
print("""
===========================================================
üìà  INTERPRETATION GUIDE
===========================================================

‚Ä¢ ‚ÄúPFIC Weight %‚Äù ‚Üí The % of ETF holdings that are likely PFICs.
   Example: If PFIC Weight % = 8%, roughly 8% of that ETF
   is exposed to names that might be deleted.

‚Ä¢ ‚ÄúDividend Change (YoY)‚Äù ‚Üí The year-over-year change in the ETF‚Äôs
   dividend yield. If it rises while PFIC exposure drops, that could
   indicate deletions and a tightening basis.

üí° TRADE IDEA:
   - ETFs with high PFIC exposure ‚Üí potential deletions ‚Üí rising basis
   - Consider long futures vs short physical ETF as a hedge or spread.

===========================================================
‚úÖ Analysis complete!
===========================================================
""")

"""
===========================================================
            PFIC Screener with Visual Analysis
===========================================================

INSTRUCTIONS:

1. Place this Jupyter Notebook and your Bloomberg export
   in the same folder, for example:

       PFIC Screen/
       ‚îú‚îÄ‚îÄ PFIC_Screener.ipynb
       ‚îî‚îÄ‚îÄ bloomberg_pfic.csv

2. Your CSV file must include the following columns:

   | Column Name        | Example                 | Description |
   |--------------------|-------------------------|--------------|
   | Ticker             | AAPL US                 | Company identifier |
   | Company Name       | Apple Inc               | Company name |
   | Sector             | Information Technology  | Company sector |
   | Market Cap         | 2,500,000,000,000       | Market capitalization |
   | Total Revenue      | 365,000,000,000         | Total company revenue |
   | Investment Income  | 25,000,000,000          | Passive investment income |
   | Total Assets       | 400,000,000,000         | Total assets |
   | Investment Assets  | 210,000,000,000         | Passive investment assets |

3. Save it as:
       bloomberg_pfic.csv

4. Run this entire cell in Jupyter Notebook.

Output:
   ‚úÖ Clean table of PFIC likelihood
   üìä Charts to visualize passive ratios
   üíæ CSV output: pfic_results.csv
===========================================================
"""

# === IMPORTS ===
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt

# === FILE PATH ===
file_path = "bloomberg_pfic.csv"

if not os.path.exists(file_path):
    raise FileNotFoundError(
        f"‚ùå File not found. Please ensure 'bloomberg_pfic.csv' "
        "is in the same folder as this notebook."
    )

print(f"‚úÖ Found file: {file_path}")

# === LOAD DATA ===
df = pd.read_csv(file_path)
df.columns = df.columns.str.strip()

# === REQUIRED COLUMNS ===
required_cols = [
    "Ticker", "Company Name", "Sector",
    "Total Revenue", "Investment Income", "Total Assets", "Investment Assets"
]

missing = [c for c in required_cols if c not in df.columns]
if missing:
    raise ValueError(f"‚ùå Missing columns in CSV: {missing}")

# === CLEAN NUMERIC COLUMNS ===
numeric_cols = ["Total Revenue", "Investment Income", "Total Assets", "Investment Assets"]
for col in numeric_cols:
    df[col] = (
        df[col]
        .astype(str)
        .str.replace(",", "", regex=False)
        .str.replace("$", "", regex=False)
        .replace("nan", np.nan)
        .astype(float)
    )

# === CALCULATE RATIOS ===
df["Passive Income %"] = df["Investment Income"] / df["Total Revenue"]
df["Passive Asset %"] = df["Investment Assets"] / df["Total Assets"]

# === PFIC THRESHOLDS ===
INCOME_THRESHOLD = 0.75
ASSET_THRESHOLD = 0.50

# === PFIC FLAG LOGIC ===
def check_pfic(row):
    income_flag = row["Passive Income %"] >= INCOME_THRESHOLD if pd.notna(row["Passive Income %"]) else False
    asset_flag = row["Passive Asset %"] >= ASSET_THRESHOLD if pd.notna(row["Passive Asset %"]) else False
    return income_flag or asset_flag

df["Likely PFIC"] = df.apply(check_pfic, axis=1)

# === REASON EXPLANATION ===
def reason(row):
    reasons = []
    if pd.notna(row["Passive Income %"]) and row["Passive Income %"] >= INCOME_THRESHOLD:
        reasons.append("Passive income ‚â• 75%")
    if pd.notna(row["Passive Asset %"]) and row["Passive Asset %"] >= ASSET_THRESHOLD:
        reasons.append("Passive assets ‚â• 50%")
    if not reasons:
        reasons.append("Below PFIC thresholds")
    return "; ".join(reasons)

df["Reason"] = df.apply(reason, axis=1)

# === SAVE RESULTS ===
output_path = "pfic_results.csv"
df.to_csv(output_path, index=False)
print(f"\nüíæ Results saved to: {output_path}\n")

# === SUMMARY OUTPUT ===
summary = df[["Ticker", "Company Name", "Sector", "Passive Income %", "Passive Asset %", "Likely PFIC", "Reason"]]
pd.set_option('display.float_format', '{:.2%}'.format)
print("=== PFIC Screening Results ===\n")
display(summary)

# === BASIC STATS ===
num_pfic = df["Likely PFIC"].sum()
total = len(df)
print(f"\n‚ö†Ô∏è  {num_pfic} out of {total} companies flagged as likely PFICs.")

# === VISUALS ===
plt.figure(figsize=(10, 6))
plt.scatter(df["Passive Asset %"], df["Passive Income %"], c=df["Likely PFIC"].map({True: 'red', False: 'green'}))
plt.axhline(INCOME_THRESHOLD, color='gray', linestyle='--', label="75% Passive Income Threshold")
plt.axvline(ASSET_THRESHOLD, color='blue', linestyle='--', label="50% Passive Asset Threshold")
plt.title("PFIC Passive Income vs Passive Assets")
plt.xlabel("Passive Asset %")
plt.ylabel("Passive Income %")
plt.legend()
plt.grid(True)
plt.show()

# === BAR CHART (TOP 15 BY PASSIVE ASSETS) ===
top15 = df.sort_values("Passive Asset %", ascending=False).head(15)
plt.figure(figsize=(10, 6))
plt.barh(top15["Company Name"], top15["Passive Asset %"], color=np.where(top15["Likely PFIC"], 'red', 'green'))
plt.xlabel("Passive Asset %")
plt.title("Top 15 Companies by Passive Asset Ratio")
plt.gca().invert_yaxis()
plt.show()



"""
===========================================================
        PFIC Screener using Bloomberg CSV Export
        (for folder: PFIC Screen/)
===========================================================

INSTRUCTIONS:

1. Make sure your Jupyter Notebook and your Bloomberg CSV file are BOTH
   in the same folder, e.g.:

       PFIC Screen/
       ‚îú‚îÄ‚îÄ PFIC_Screener.ipynb
       ‚îî‚îÄ‚îÄ bloomberg_pfic.csv

2. The Bloomberg export must include these columns:

   | Bloomberg Field Name      | Mnemonic                | Column Name in CSV (exact) |
   |---------------------------|--------------------------|-----------------------------|
   | Ticker                   | TICKER                   | Ticker                      |
   | Company Name              | NAME                     | Company Name                |
   | Country of Domicile       | CNTRY_DOMICILE           | Country Domicile            |
   | GICS Sector Name          | GICS_SECTOR_NAME         | Sector                      |
   | Market Cap (USD)          | CUR_MKT_CAP              | Market Cap                  |
   | Total Revenue             | IS_TOT_REV               | Total Revenue               |
   | Investment Income         | IS_INVESTMENT_INCOME     | Investment Income           |
   | Total Assets              | BS_TOT_ASSET             | Total Assets                |
   | Investment Assets         | BS_INVESTMENTS_ASSETS    | Investment Assets           |

3. Save the file as:  bloomberg_pfic.csv
   (no spaces, correct extension)

4. Run this entire code block.

5. Output:
   - Printed summary in the notebook
   - Full results saved as: pfic_results.csv

===========================================================
"""

import pandas as pd
import numpy as np
import os

# === Locate CSV File Automatically ===
folder = os.path.dirname(os.path.abspath(__file__)) if "__file__" in globals() else os.getcwd()
file_path = os.path.join(folder, "bloomberg_pfic.csv")

if not os.path.exists(file_path):
    raise FileNotFoundError(
        f"‚ùå Could not find 'bloomberg_pfic.csv' in this folder:\n{folder}\n\n"
        "‚û°Ô∏è Please confirm the file is in the same folder as your notebook."
    )

print(f"‚úÖ Found Bloomberg file at: {file_path}")

# === SETTINGS ===
PASSIVE_INCOME_THRESHOLD = 0.75   # 75% passive income
PASSIVE_ASSET_THRESHOLD = 0.50    # 50% passive assets

# === LOAD DATA ===
df = pd.read_csv(file_path)
df.columns = df.columns.str.strip()  # clean up headers

# === CHECK REQUIRED COLUMNS ===
required = [
    "Ticker", "Company Name", "Country Domicile", "Sector",
    "Total Revenue", "Investment Income", "Total Assets", "Investment Assets"
]
missing = [c for c in required if c not in df.columns]
if missing:
    raise ValueError(f"‚ùå Missing columns in your CSV file: {missing}\n"
                     f"Please ensure headers exactly match those listed above.")

# === CLEAN NUMERIC FIELDS ===
for col in ["Total Revenue", "Investment Income", "Total Assets", "Investment Assets"]:
    df[col] = (
        df[col]
        .astype(str)
        .str.replace(",", "", regex=False)
        .str.replace("$", "", regex=False)
        .replace("nan", np.nan)
        .astype(float)
    )

# === CALCULATE RATIOS ===
df["Passive Income %"] = df["Investment Income"] / df["Total Revenue"]
df["Passive Asset %"] = df["Investment Assets"] / df["Total Assets"]

# === PFIC LOGIC ===
def is_foreign(country):
    """Return True if not US-domiciled."""
    if pd.isna(country):
        return False
    text = str(country).lower()
    return not any(word in text for word in ["united states", "us", "u.s.", "america"])

def likely_pfic(row):
    """Flag potential PFIC based on thresholds."""
    if not is_foreign(row["Country Domicile"]):
        return False
    income_flag = (
        row["Passive Income %"] >= PASSIVE_INCOME_THRESHOLD
        if pd.notna(row["Passive Income %"])
        else False
    )
    asset_flag = (
        row["Passive Asset %"] >= PASSIVE_ASSET_THRESHOLD
        if pd.notna(row["Passive Asset %"])
        else False
    )
    return income_flag or asset_flag

df["Likely PFIC"] = df.apply(likely_pfic, axis=1)

# === ADD EXPLANATION ===
def reason(row):
    if not is_foreign(row["Country Domicile"]):
        return "US-domiciled"
    reasons = []
    if pd.notna(row["Passive Income %"]) and row["Passive Income %"] >= PASSIVE_INCOME_THRESHOLD:
        reasons.append("Passive income ‚â• 75%")
    if pd.notna(row["Passive Asset %"]) and row["Passive Asset %"] >= PASSIVE_ASSET_THRESHOLD:
        reasons.append("Passive assets ‚â• 50%")
    if not reasons:
        reasons.append("Foreign but below thresholds")
    return "; ".join(reasons)

df["Reason"] = df.apply(reason, axis=1)

# === DISPLAY RESULTS ===
print("\n=== PFIC Screening Summary ===\n")
print(df[["Ticker", "Company Name", "Country Domicile", "Sector",
          "Passive Income %", "Passive Asset %",
          "Likely PFIC", "Reason"]])

# === SAVE OUTPUT ===
output_file = os.path.join(folder, "pfic_results.csv")
df.to_csv(output_file, index=False)
print(f"\n‚úÖ Full results saved to: {output_file}")

# === PRINT FLAGGED COMPANIES ===
flagged = df[df["Likely PFIC"]]
print(f"\n‚ö†Ô∏è  {len(flagged)} potential PFIC(s) flagged:\n")
print(flagged[["Ticker", "Company Name", "Country Domicile", "Reason"]])

print("\n‚úÖ Done. Review 'pfic_results.csv' for full details.")



"""
===========================================================
        PFIC Screener using Bloomberg CSV Export
===========================================================

INSTRUCTIONS:

1. In Bloomberg Excel Add-In, create a file called:
      bloomberg_pfic.csv

2. Export the following fields (including tickers):

   | Bloomberg Field Name      | Mnemonic                | Column Name in CSV (exact) | Purpose |
   |---------------------------|--------------------------|-----------------------------|----------|
   | Ticker                   | TICKER                   | Ticker                      | Identifier |
   | Company Name              | NAME                     | Company Name                | Identify the company |
   | Country of Domicile       | CNTRY_DOMICILE           | Country Domicile            | PFIC test ‚Üí must be non-US |
   | GICS Sector Name          | GICS_SECTOR_NAME         | Sector                      | Context check |
   | Market Cap (USD)          | CUR_MKT_CAP              | Market Cap                  | Context |
   | Total Revenue             | IS_TOT_REV               | Total Revenue               | Denominator for income ratio |
   | Investment Income         | IS_INVESTMENT_INCOME     | Investment Income           | Passive income numerator |
   | Total Assets              | BS_TOT_ASSET             | Total Assets                | Denominator for asset ratio |
   | Investment Assets         | BS_INVESTMENTS_ASSETS    | Investment Assets           | Passive asset numerator |

3. Save that file in the SAME folder as this notebook with the name:
      bloomberg_pfic.csv

4. Run this entire code block.

5. Output:
   - Printed summary in the notebook
   - Full results saved to: pfic_results.csv

INTERPRETATION:
   - "Likely PFIC" = True means:
       ‚Ä¢ The company is foreign-domiciled, AND
       ‚Ä¢ Either:
           - ‚â•75% of income is passive, or
           - ‚â•50% of assets are passive
   - "Reason" column explains why it was flagged.

===========================================================
"""

# === Imports ===
import pandas as pd
import numpy as np

# === SETTINGS ===
FILE_NAME = "bloomberg_pfic.csv"
PASSIVE_INCOME_THRESHOLD = 0.75   # 75% passive income
PASSIVE_ASSET_THRESHOLD = 0.50    # 50% passive assets

# === LOAD DATA ===
df = pd.read_csv(FILE_NAME)
df.columns = df.columns.str.strip()  # remove extra spaces

# === CHECK REQUIRED COLUMNS ===
required = [
    "Ticker", "Company Name", "Country Domicile", "Sector",
    "Total Revenue", "Investment Income", "Total Assets", "Investment Assets"
]
missing = [c for c in required if c not in df.columns]
if missing:
    raise ValueError(f"‚ùå Missing columns in your CSV file: {missing}\n"
                     f"Please ensure headers exactly match those listed above.")

# === CLEAN NUMERIC FIELDS ===
for col in ["Total Revenue", "Investment Income", "Total Assets", "Investment Assets"]:
    df[col] = (
        df[col]
        .astype(str)
        .str.replace(",", "", regex=False)
        .str.replace("$", "", regex=False)
        .replace("nan", np.nan)
        .astype(float)
    )

# === CALCULATE RATIOS ===
df["Passive Income %"] = df["Investment Income"] / df["Total Revenue"]
df["Passive Asset %"] = df["Investment Assets"] / df["Total Assets"]

# === PFIC LOGIC ===
def is_foreign(country):
    """Return True if not US-domiciled."""
    if pd.isna(country):
        return False
    text = str(country).lower()
    return not any(word in text for word in ["united states", "us", "u.s.", "america"])

def likely_pfic(row):
    """Flag potential PFIC based on thresholds."""
    if not is_foreign(row["Country Domicile"]):
        return False
    income_flag = (
        row["Passive Income %"] >= PASSIVE_INCOME_THRESHOLD
        if pd.notna(row["Passive Income %"])
        else False
    )
    asset_flag = (
        row["Passive Asset %"] >= PASSIVE_ASSET_THRESHOLD
        if pd.notna(row["Passive Asset %"])
        else False
    )
    return income_flag or asset_flag

df["Likely PFIC"] = df.apply(likely_pfic, axis=1)

# === ADD EXPLANATION ===
def reason(row):
    if not is_foreign(row["Country Domicile"]):
        return "US-domiciled"
    reasons = []
    if pd.notna(row["Passive Income %"]) and row["Passive Income %"] >= PASSIVE_INCOME_THRESHOLD:
        reasons.append("Passive income ‚â• 75%")
    if pd.notna(row["Passive Asset %"]) and row["Passive Asset %"] >= PASSIVE_ASSET_THRESHOLD:
        reasons.append("Passive assets ‚â• 50%")
    if not reasons:
        reasons.append("Foreign but below thresholds")
    return "; ".join(reasons)

df["Reason"] = df.apply(reason, axis=1)

# === DISPLAY RESULTS ===
print("\n=== PFIC Screening Summary ===\n")
print(df[["Ticker", "Company Name", "Country Domicile", "Sector",
          "Passive Income %", "Passive Asset %",
          "Likely PFIC", "Reason"]])

# === SAVE OUTPUT ===
output_file = "pfic_results.csv"
df.to_csv(output_file, index=False)
print(f"\n‚úÖ Full results saved to: {output_file}")

# === PRINT FLAGGED COMPANIES ===
flagged = df[df["Likely PFIC"]]
print(f"\n‚ö†Ô∏è  {len(flagged)} potential PFIC(s) flagged:\n")
print(flagged[["Ticker", "Company Name", "Country Domicile", "Reason"]])

print("\n‚úÖ Done. Review 'pfic_results.csv' for full details.")

"""
===========================================================
     PFIC Screener using Bloomberg Excel Export (Simplified)
===========================================================

INSTRUCTIONS:

1. In Bloomberg Excel Add-In, create a file called:
      bloomberg_pfic.xlsx

2. Export the following fields for all the companies you want to test:

   | Bloomberg Field Name      | Mnemonic                | Column Name in Excel (exact) | Purpose |
   |---------------------------|--------------------------|-------------------------------|----------|
   | Company Name              | NAME                     | Company Name                  | Identify the company |
   | Country of Domicile       | CNTRY_DOMICILE           | Country Domicile              | PFIC test ‚Üí must be non-US |
   | GICS Sector Name          | GICS_SECTOR_NAME         | Sector                        | Context check |
   | Market Cap (USD)          | CUR_MKT_CAP              | Market Cap                    | Context |
   | Total Revenue             | IS_TOT_REV               | Total Revenue                 | Denominator for income ratio |
   | Investment Income         | IS_INVESTMENT_INCOME     | Investment Income             | Passive income numerator |
   | Total Assets              | BS_TOT_ASSET             | Total Assets                  | Denominator for asset ratio |
   | Investment Assets         | BS_INVESTMENTS_ASSETS    | Investment Assets             | Passive asset numerator |

3. Save that Excel file in the SAME folder as this notebook with the name:
      bloomberg_pfic.xlsx

4. Run this entire code block.

5. Output:
   - Printed summary in the notebook
   - Full file saved as: pfic_results.xlsx

INTERPRETATION:
   - "Likely PFIC" = True means:
       - The company is foreign-domiciled, AND
       - Either:
            ‚Ä¢ ‚â•75% of income is passive, or
            ‚Ä¢ ‚â•50% of assets are passive
   - "Reason" column explains why it was flagged.

===========================================================
"""

# === Imports ===
import pandas as pd
import numpy as np

# === SETTINGS ===
FILE_NAME = "bloomberg_pfic.xlsx"
PASSIVE_INCOME_THRESHOLD = 0.75   # 75% passive income
PASSIVE_ASSET_THRESHOLD = 0.50    # 50% passive assets

# === LOAD DATA ===
df = pd.read_excel(FILE_NAME)
df.columns = df.columns.str.strip()  # remove stray spaces from headers

# === CHECK REQUIRED COLUMNS ===
required = [
    "Company Name", "Country Domicile", "Sector",
    "Total Revenue", "Investment Income", "Total Assets", "Investment Assets"
]
missing = [c for c in required if c not in df.columns]
if missing:
    raise ValueError(f"‚ùå Missing columns in your Excel file: {missing}\n"
                     f"Please ensure your headers exactly match the required format.")

# === CLEAN NUMERIC FIELDS ===
for col in ["Total Revenue", "Investment Income", "Total Assets", "Investment Assets"]:
    df[col] = (
        df[col]
        .astype(str)
        .str.replace(",", "", regex=False)
        .str.replace("$", "", regex=False)
        .replace("nan", np.nan)
        .astype(float)
    )

# === CALCULATE RATIOS ===
df["Passive Income %"] = df["Investment Income"] / df["Total Revenue"]
df["Passive Asset %"] = df["Investment Assets"] / df["Total Assets"]

# === PFIC LOGIC FUNCTIONS ===
def is_foreign(country):
    """Return True if not US-domiciled."""
    if pd.isna(country):
        return False
    text = str(country).lower()
    return not any(word in text for word in ["united states", "us", "u.s.", "america"])

def likely_pfic(row):
    """Flag potential PFIC based on thresholds."""
    if not is_foreign(row["Country Domicile"]):
        return False
    income_flag = (
        row["Passive Income %"] >= PASSIVE_INCOME_THRESHOLD
        if pd.notna(row["Passive Income %"])
        else False
    )
    asset_flag = (
        row["Passive Asset %"] >= PASSIVE_ASSET_THRESHOLD
        if pd.notna(row["Passive Asset %"])
        else False
    )
    return income_flag or asset_flag

df["Likely PFIC"] = df.apply(likely_pfic, axis=1)

# === ADD TEXT EXPLANATION ===
def reason(row):
    if not is_foreign(row["Country Domicile"]):
        return "US-domiciled"
    reasons = []
    if pd.notna(row["Passive Income %"]) and row["Passive Income %"] >= PASSIVE_INCOME_THRESHOLD:
        reasons.append("Passive income ‚â• 75%")
    if pd.notna(row["Passive Asset %"]) and row["Passive Asset %"] >= PASSIVE_ASSET_THRESHOLD:
        reasons.append("Passive assets ‚â• 50%")
    if not reasons:
        reasons.append("Foreign but below thresholds")
    return "; ".join(reasons)

df["Reason"] = df.apply(reason, axis=1)

# === DISPLAY RESULTS ===
print("\n=== PFIC Screening Summary ===\n")
print(df[["Company Name", "Country Domicile", "Sector",
          "Passive Income %", "Passive Asset %",
          "Likely PFIC", "Reason"]])

# === SAVE OUTPUT ===
output_file = "pfic_results.xlsx"
df.to_excel(output_file, index=False)
print(f"\n‚úÖ Full results saved to: {output_file}")

# === PRINT FLAGGED COMPANIES ===
flagged = df[df["Likely PFIC"]]
print(f"\n‚ö†Ô∏è  {len(flagged)} potential PFIC(s) flagged:\n")
print(flagged[["Company Name", "Country Domicile", "Reason"]])

print("\n‚úÖ Done. Review 'pfic_results.xlsx' for full details.")


# ================================================================
# PFIC Screener for Bloomberg Excel Exports
# Author: [Your Name]
# ================================================================

import pandas as pd
import numpy as np

# === Step 1: Load Bloomberg Excel File ===
file_path = "bloomberg_data.xlsx"  # ensure file is in same folder
df = pd.read_excel(file_path)

# === Step 2: Clean Column Names ===
df.columns = df.columns.str.strip().str.lower()

# === Step 3: Check Required Columns ===
required = ['company name', 'market cap', 'country domicile', 'gics sector name']
for col in required:
    if col not in df.columns:
        raise ValueError(f"Missing required column: '{col}'. Please ensure your Excel matches the format.")

# === Step 4: Calculate Passive Ratios (if numeric data exists) ===
def safe_ratio(numerator, denominator):
    try:
        return float(numerator) / float(denominator) if denominator and denominator != 0 else np.nan
    except:
        return np.nan

if 'investment income' in df.columns and 'total revenue' in df.columns:
    df['passive_income_ratio'] = df.apply(lambda x: safe_ratio(x['investment income'], x['total revenue']), axis=1)
else:
    df['passive_income_ratio'] = np.nan

if 'investment assets' in df.columns and 'total assets' in df.columns:
    df['investment_asset_ratio'] = df.apply(lambda x: safe_ratio(x['investment assets'], x['total assets']), axis=1)
else:
    df['investment_asset_ratio'] = np.nan

# === Step 5: Define PFIC Logic ===
def is_pfic(row):
    """
    Flags a company as PFIC if:
    1. It's non-US domiciled
    2. Operates in a passive/financial sector
    3. Has >75% passive income or >50% investment assets (if available)
    """
    country = str(row.get('country domicile', '')).lower()
    sector = str(row.get('gics sector name', '')).lower()

    # Rule 1: Must be foreign
    is_foreign = country not in ['united states', 'us', 'u.s.', 'usa']

    # Rule 2: Passive sectors (broad categories)
    passive_sectors = [
        'financials', 'real estate', 'reit', 'investment',
        'asset management', 'holding', 'trust', 'fund', 'capital'
    ]
    in_passive_sector = any(word in sector for word in passive_sectors)

    # Rule 3: Passive ratios (if data available)
    passive_income_ratio = row.get('passive_income_ratio', np.nan)
    investment_asset_ratio = row.get('investment_asset_ratio', np.nan)

    meets_ratio_test = (
        (not np.isnan(passive_income_ratio) and passive_income_ratio >= 0.75) or
        (not np.isnan(investment_asset_ratio) and investment_asset_ratio >= 0.5)
    )

    # Combine conditions
    if is_foreign and (in_passive_sector or meets_ratio_test):
        return True
    return False

# === Step 6: Apply Logic ===
df['likely_pfic'] = df.apply(is_pfic, axis=1)

# === Step 7: Display & Export Results ===
pfic_df = df[df['likely_pfic']].copy()

print("===================================================")
print(f"‚úÖ PFIC Screening Complete: {len(pfic_df)} potential PFICs found.")
print("===================================================\n")

display_cols = [
    'company name', 'country domicile', 'gics sector name', 'market cap',
    'passive_income_ratio', 'investment_asset_ratio', 'likely_pfic'
]

display(df[display_cols].head(20))

# Save results
output_file = "pfic_results.xlsx"
pfic_df.to_excel(output_file, index=False)

print(f"üíæ Results saved to '{output_file}'




# PFIC Forensic Screener - Detailed, copy & paste into Jupyter
# Requirements: pandas, numpy, openpyxl, country_converter (optional)
# pip install pandas numpy openpyxl country_converter

import os
import pandas as pd
import numpy as np
from pathlib import Path

# ----------------------------
# User settings
# ----------------------------
INPUT_FILE = "bloomberg_data.xlsx"   # put your Bloomberg export here
OUTPUT_EXCEL = "pfic_forensic_report.xlsx"
FLAGGED_FILE = "pfic_flagged.xlsx"
CSV_OUT = "pfic_forensic_detailed.csv"

# Thresholds per PFIC rules (statutory thresholds)
PASSIVE_INCOME_THRESHOLD = 0.75   # 75% of gross income passive
PASSIVE_ASSET_THRESHOLD = 0.50    # 50% of assets produce passive income

# Tolerances (for human review): allow tiny epsilon due to rounding
EPS = 1e-9

# ----------------------------
# Helper functions
# ----------------------------
def read_input(file_path):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Input file not found: {file_path}. Please export Bloomberg file to this name.")
    # read with pandas (supports .xlsx)
    df = pd.read_excel(file_path, engine="openpyxl")
    # normalize column names (lowercase & stripped)
    df.columns = df.columns.str.strip()
    return df

def safe_num(x):
    """Convert a cell to float or NaN (handles strings with commas, parentheses)."""
    if pd.isna(x):
        return np.nan
    try:
        # remove commas and parentheses and currency symbols
        s = str(x).replace(',', '').replace('(', '-').replace(')', '').replace('$','').strip()
        return float(s)
    except:
        return np.nan

def ensure_ratio(numer, denom):
    """Return ratio numer/denom or NaN if denom missing/0."""
    n = safe_num(numer)
    d = safe_num(denom)
    if pd.isna(n) or pd.isna(d) or d == 0:
        return np.nan
    return n / d

def isin_to_country(isin):
    """Infer country from ISIN prefix (first 2 letters) if present."""
    if pd.isna(isin):
        return None
    try:
        return isin.strip()[:2].upper()
    except:
        return None

def is_us_country_text(s):
    if pd.isna(s):
        return False
    s2 = str(s).lower()
    return any(x in s2 for x in ['united states','usa','u.s.','us','america'])

# ----------------------------
# Load data
# ----------------------------
print("Loading input file:", INPUT_FILE)
df_raw = read_input(INPUT_FILE)
print(f"Loaded {len(df_raw)} rows and columns: {list(df_raw.columns)}")

# Standardize column names for internal use (lowercase)
col_map = {c: c.strip() for c in df_raw.columns}
df = df_raw.rename(columns=col_map)
# We'll try to map commonly used names to canonical internal column names
# Preferred exact names as per instructions above; but attempt flexible mapping
canonical = {
    'company name':'Company Name',
    'name':'Company Name',
    'ticker':'Ticker',
    'id_isin':'ISIN',
    'isin':'ISIN',
    'cntry_domicile':'Country Domicile',
    'country domicile':'Country Domicile',
    'incorp_country':'Incorporation Country',
    'incorporation country':'Incorporation Country',
    'cur_mkt_cap':'Market Cap',
    'market cap':'Market Cap',
    'bs_tot_asset':'Total Assets',
    'total assets':'Total Assets',
    'bs_investments_assets':'Investment Assets',
    'investment assets':'Investment Assets',
    'is_tot_rev':'Total Revenue',
    'total revenue':'Total Revenue',
    'is_investment_income':'Investment Income',
    'investment income':'Investment Income',
    'is_interest_income':'Interest Income',
    'is_non_op_inc':'Non-op Income',
    'gics_sector_name':'GICS Sector Name',
    'gics sector name':'GICS Sector Name',
    'free_float':'Free Float',
    'free float':'Free Float',
    'iss_out':'Shares Outstanding',
    'shares_outstanding':'Shares Outstanding',
    'exchange country':'Exchange Country',
    'exch_country':'Exchange Country'
}

# perform mapping if columns exist (case-insensitive)
cols_lower = {c.lower(): c for c in df.columns}
for key, canon in canonical.items():
    if key in cols_lower:
        df = df.rename(columns={cols_lower[key]: canon})

# Now check required minimal columns
required_min = ['Company Name', 'Market Cap', 'GICS Sector Name']
missing_req = [c for c in required_min if c not in df.columns]
if missing_req:
    print("Warning: your Bloomberg file is missing recommended columns:", missing_req)
    print("You can still run the script, but some checks will be 'N/A' and require manual inspection.")

# Prepare output DataFrame with canonical cols (create missing with NaN)
for c in ['Company Name','Ticker','ISIN','Country Domicile','Incorporation Country',
          'Market Cap','Total Assets','Investment Assets','Total Revenue','Investment Income',
          'Interest Income','Non-op Income','GICS Sector Name','Free Float','Shares Outstanding','Exchange Country']:
    if c not in df.columns:
        df[c] = np.nan

# Convert numeric columns
for numcol in ['Market Cap','Total Assets','Investment Assets','Total Revenue','Investment Income','Interest Income','Free Float','Shares Outstanding']:
    df[numcol] = df[numcol].apply(safe_num)

# Normalize Free Float if in percent 0-100 -> convert to 0-1
if 'Free Float' in df.columns:
    df['Free Float'] = df['Free Float'].apply(lambda x: (x/100.0) if (not pd.isna(x) and x>1.5) else x)

# ----------------------------
# Compute forensic PFIC metrics & checklist
# ----------------------------
def pfic_check_row(row):
    reasons = []
    flags = {}
    # 1) Domicile: check Country Domicile, Incorporation Country, ISIN prefix
    country_text = row.get('Country Domicile')
    inc_country = row.get('Incorporation Country')
    isin = row.get('ISIN')
    inferred_isin_country = isin_to_country(isin)
    # US test
    is_us_dom = is_us_country_text(country_text) or is_us_country_text(inc_country)
    if inferred_isin_country:
        if inferred_isin_country in ['US','US']: # explicit
            is_us_dom = True
    flags['is_foreign_domicile'] = not is_us_dom
    if not is_us_dom:
        reasons.append("Foreign domicile (Country Domicile / Incorporation / ISIN indicates non-US)")
    else:
        reasons.append("US domicile flagged (not foreign)")
    # 2) Passive income ratio
    passive_income_ratio = ensure_ratio(row.get('Investment Income'), row.get('Total Revenue'))
    # also include interest + non-op income if Investment Income missing
    if pd.isna(passive_income_ratio):
        alt_num = 0.0
        got_alt = False
        if not pd.isna(row.get('Interest Income')):
            alt_num += safe_num(row.get('Interest Income')); got_alt=True
        if not pd.isna(row.get('Non-op Income')):
            alt_num += safe_num(row.get('Non-op Income')); got_alt=True
        if got_alt and not pd.isna(row.get('Total Revenue')):
            passive_income_ratio = safe_num(alt_num) / safe_num(row.get('Total Revenue'))
    flags['passive_income_ratio'] = passive_income_ratio
    if not pd.isna(passive_income_ratio):
        if passive_income_ratio + EPS >= PASSIVE_INCOME_THRESHOLD:
            flags['passive_income_flag'] = True
            reasons.append(f"Passive income ratio >= {PASSIVE_INCOME_THRESHOLD:.0%} ({passive_income_ratio:.2%})")
        else:
            flags['passive_income_flag'] = False
            reasons.append(f"Passive income ratio below threshold ({passive_income_ratio:.2%})")
    else:
        flags['passive_income_flag'] = None
        reasons.append("Passive income ratio N/A (check Investment Income / Total Revenue fields)")
    # 3) Investment asset ratio
    inv_asset_ratio = ensure_ratio(row.get('Investment Assets'), row.get('Total Assets'))
    flags['investment_asset_ratio'] = inv_asset_ratio
    if not pd.isna(inv_asset_ratio):
        if inv_asset_ratio + EPS >= PASSIVE_ASSET_THRESHOLD:
            flags['passive_assets_flag'] = True
            reasons.append(f"Investment asset ratio >= {PASSIVE_ASSET_THRESHOLD:.0%} ({inv_asset_ratio:.2%})")
        else:
            flags['passive_assets_flag'] = False
            reasons.append(f"Investment asset ratio below threshold ({inv_asset_ratio:.2%})")
    else:
        flags['passive_assets_flag'] = None
        reasons.append("Investment asset ratio N/A (check Investment Assets / Total Assets fields)")
    # 4) Passive sector heuristic (REIT, Fund, Holding, Investment, Trust)
    sector = str(row.get('GICS Sector Name', '')).lower() if not pd.isna(row.get('GICS Sector Name')) else ''
    passive_sector_keywords = ['financials','real estate','reit','investment','asset management','holding','trust','fund','capital','private equity','venture']
    in_passive_sector = any(k in sector for k in passive_sector_keywords)
    flags['passive_sector'] = in_passive_sector
    reasons.append("Passive-sector signal" if in_passive_sector else "Non-passive sector signal")
    # 5) Market cap small / suspicious (optional heuristic)
    mktcap = safe_num(row.get('Market Cap'))
    flags['market_cap'] = mktcap
    if not pd.isna(mktcap) and mktcap < 50e6:
        reasons.append("Very small market cap (< $50m) - inspect for private/illiquid company")
    # 6) Free float small (optional)
    ff = row.get('Free Float')
    flags['free_float'] = ff
    if not pd.isna(ff):
        if ff < 0.05:
            reasons.append("Very low free float (<5%) - potential lock-up or strategic holdings")
        elif ff < 0.20:
            reasons.append("Low free float (<20%) - reduced public float")
    # 7) Final PFIC estimation logic for initial screening
    likely_pfic = False
    # statutory style test: foreign AND (passive income threshold OR passive asset threshold)
    if flags['is_foreign_domicile'] and ((flags['passive_income_flag'] is True) or (flags['passive_assets_flag'] is True)):
        likely_pfic = True
        reasons.append("Meets statutory-like PFIC thresholds (foreign + passive ratios)")
    # heuristic flag: foreign + passive sector or very low free float (warrants manual review)
    elif flags['is_foreign_domicile'] and (in_passive_sector or (not pd.isna(ff) and ff < 0.20)):
        reasons.append("Heuristic PFIC candidate: foreign + passive-sector or low free float -> manual review recommended")
        likely_pfic = True
    else:
        reasons.append("Not likely PFIC by automated tests (manual check recommended if uncertain)")
    flags['likely_pfic'] = likely_pfic
    flags['reasons'] = " ; ".join(reasons)
    # include computed ratios for output
    flags['passive_income_ratio_display'] = (f"{passive_income_ratio:.4f}" if not pd.isna(passive_income_ratio) else "N/A")
    flags['investment_asset_ratio_display'] = (f"{inv_asset_ratio:.4f}" if not pd.isna(inv_asset_ratio) else "N/A")
    return flags

# Run row-by-row
records = []
for idx, r in df.iterrows():
    out = pfic_check_row(r)
    # produce a tidy record
    rec = {
        'Company Name': r.get('Company Name'),
        'Ticker': r.get('Ticker'),
        'ISIN': r.get('ISIN'),
        'Country Domicile': r.get('Country Domicile'),
        'Incorporation Country': r.get('Incorporation Country'),
        'Market Cap': r.get('Market Cap'),
        'GICS Sector Name': r.get('GICS Sector Name'),
        'Free Float': r.get('Free Float'),
        'Total Assets': r.get('Total Assets'),
        'Investment Assets': r.get('Investment Assets'),
        'Total Revenue': r.get('Total Revenue'),
        'Investment Income': r.get('Investment Income'),
        'Interest Income': r.get('Interest Income'),
        'Non-op Income': r.get('Non-op Income'),
        'Likely PFIC': out['likely_pfic'],
        'Passive Income Ratio': out['passive_income_ratio_display'],
        'Investment Asset Ratio': out['investment_asset_ratio_display'],
        'Passive Sector Signal': out['passive_sector'],
        'Is Foreign Domicile': out['is_foreign_domicile'],
        'Free Float (raw)': out['free_float'],
        'Checklist Reasons': out['reasons']
    }
    records.append(rec)

out_df = pd.DataFrame.from_records(records)

# Save outputs: excel with multiple sheets and a flagged-only file
with pd.ExcelWriter(OUTPUT_EXCEL, engine='openpyxl') as writer:
    out_df.to_excel(writer, sheet_name='PFIC_Forensic', index=False)
    out_df[out_df['Likely PFIC'] == True].to_excel(writer, sheet_name='Flagged_PFIC', index=False)
    out_df[out_df['Likely PFIC'] == False].to_excel(writer, sheet_name='NonFlagged', index=False)

out_df.to_csv(CSV_OUT, index=False)
out_df[out_df['Likely PFIC']].to_excel(FLAGGED_FILE, index=False)

print(f"Done. Detailed PFIC forensic report saved to: {OUTPUT_EXCEL}")
print(f"Flagged-only file saved to: {FLAGGED_FILE}")
print(f"CSV saved to: {CSV_OUT}")
print("\nSummary counts:")
print(out_df['Likely PFIC'].value_counts(dropna=False))

# Show first 10 flagged for quick inspection in notebook
flagged = out_df[out_df['Likely PFIC'] == True]
print(f"\nFirst 10 flagged PFIC candidates (showing checklist): {len(flagged)} found")
display_cols = ['Company Name','Ticker','ISIN','Country Domicile','GICS Sector Name','Market Cap','Passive Income Ratio','Investment Asset Ratio','Free Float (raw)','Checklist Reasons']
print(flagged[display_cols].head(10).to_string(index=False))

. Open in Excel to view all flagged PFICs.")