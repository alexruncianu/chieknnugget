# Install dependencies if not already installed:
# !pip install jupyter-dash plotly dash

import pandas as pd
import plotly.express as px
from jupyter_dash import JupyterDash
from dash import dcc, html
from dash.dependencies import Input, Output

# ----------------------------------------------------------------------
# Example dataframe (replace this with your df)
# ----------------------------------------------------------------------
data = {
    "date": ["2025-09-23","2025-09-23","2025-09-23","2025-09-24","2025-09-24","2025-09-24"],
    "ticker": ["TSLA","AAPL","MSFT","TSLA","AAPL","MSFT"],
    "client": ["ClientA","ClientB","ClientC","ClientA","ClientB","ClientC"],
    "position_size": [150,200,180,160,130,210],
    "theme": ["EV","Tech","Tech","EV","Tech","Tech"]
}
df = pd.DataFrame(data)
df["date"] = pd.to_datetime(df["date"])

# ----------------------------------------------------------------------
# Option 1: Quick inline charts (no Dash, just Plotly)
# ----------------------------------------------------------------------
print("ðŸ‘‰ Quick inline charts below")

# Positioning over time by ticker
pos_over_time = df.groupby(["date","ticker"])["position_size"].sum().reset_index()
fig1 = px.line(pos_over_time, x="date", y="position_size", color="ticker", markers=True,
               title="Total Position Size Over Time by Ticker")
fig1.show()

# Theme distribution across all tickers
theme_dist = df.groupby("theme")["position_size"].sum().reset_index()
fig2 = px.bar(theme_dist, x="theme", y="position_size", text="position_size",
              title="Theme Distribution Across All Tickers")
fig2.update_traces(textposition="outside")
fig2.show()

# ----------------------------------------------------------------------
# Option 2: Full interactive dashboard (with dropdown)
# ----------------------------------------------------------------------
print("ðŸ‘‰ Launching full dashboard inline")

app = JupyterDash(__name__)
app.title = "Client Positioning Dashboard"

app.layout = html.Div([
    html.H2("Client Positioning Dashboard"),

    dcc.Dropdown(
        id="ticker-dropdown",
        options=[{"label": t, "value": t} for t in sorted(df["ticker"].unique())],
        value=sorted(df["ticker"].unique())[0],
        clearable=False
    ),

    dcc.Graph(id="position-over-time"),
    dcc.Graph(id="theme-distribution"),
    dcc.Graph(id="client-breakdown")
])

@app.callback(
    [Output("position-over-time", "figure"),
     Output("theme-distribution", "figure"),
     Output("client-breakdown", "figure")],
    [Input("ticker-dropdown", "value")]
)
def update_charts(selected_ticker):
    dff = df[df["ticker"] == selected_ticker]

    # 1. Positions over time
    pos_time = dff.groupby("date")["position_size"].sum().reset_index()
    fig_time = px.line(pos_time, x="date", y="position_size", markers=True,
                       title=f"Positions Over Time: {selected_ticker}")

    # 2. Theme distribution
    theme_dist = dff.groupby("theme")["position_size"].sum().reset_index()
    fig_theme = px.bar(theme_dist, x="theme", y="position_size", text="position_size",
                       title=f"Theme Distribution: {selected_ticker}")
    fig_theme.update_traces(textposition="outside")

    # 3. Client breakdown
    client_dist = dff.groupby("client")["position_size"].sum().reset_index()
    fig_client = px.bar(client_dist, x="client", y="position_size", text="position_size",
                        title=f"Client Breakdown: {selected_ticker}")
    fig_client.update_traces(textposition="outside")

    return fig_time, fig_theme, fig_client

# Run inline in Jupyter
app.run_server(mode="inline")




----


import pandas as pd
import plotly.express as px

# ----------------------------------------------------------------------
# Example dataframe (replace this with your df)
# ----------------------------------------------------------------------
data = {
    "date": ["2025-09-23","2025-09-23","2025-09-24","2025-09-24","2025-09-24","2025-09-25"],
    "ticker": ["XXINF","YYDEF","ZZINF","AAINF","BBDEF","CCXYZ"],
    "client": ["ClientA","ClientB","ClientA","ClientC","ClientB","ClientA"],
    "position_size": [150,200,160,120,130,90]
}
df = pd.DataFrame(data)
df["date"] = pd.to_datetime(df["date"])

# ----------------------------------------------------------------------
# Define suffix â†’ theme mapping
# ----------------------------------------------------------------------
suffix_map = {
    "INF": "Infrastructure",
    "DEF": "Defence"
}

def map_theme(ticker):
    ticker = str(ticker).upper()  # make case-insensitive
    for suffix, theme in suffix_map.items():
        if ticker.endswith(suffix):
            return theme
    return "Other"

df["theme"] = df["ticker"].apply(map_theme)

# ----------------------------------------------------------------------
# Aggregations
# ----------------------------------------------------------------------
# Positioning over time (by theme)
pos_over_time = df.groupby(["date","theme"])["position_size"].sum().reset_index()

# Theme totals
theme_totals = df.groupby("theme")["position_size"].sum().reset_index()

# Client breakdown by theme
client_theme = df.groupby(["client","theme"])["position_size"].sum().reset_index()

# ----------------------------------------------------------------------
# Visualisations
# ----------------------------------------------------------------------

# 1. Positioning over time by theme
fig1 = px.line(
    pos_over_time,
    x="date",
    y="position_size",
    color="theme",
    markers=True,
    title="Positioning Over Time by Theme"
)
fig1.show()

# 2. Total theme distribution
fig2 = px.bar(
    theme_totals,
    x="theme",
    y="position_size",
    text="position_size",
    title="Theme Distribution Across All Baskets"
)
fig2.update_traces(textposition="outside")
fig2.show()

# 3. Client breakdown by theme
fig3 = px.bar(
    client_theme,
    x="client",
    y="position_size",
    color="theme",
    barmode="group",
    title="Client Breakdown by Theme"
)
fig3.show()


import pandas as pd
import matplotlib.pyplot as plt

# -------------------
# Load data
# -------------------
df = pd.read_csv("your_file.csv")

# Assuming columns: add_date, ticker, t+1, t+2, ..., t+n
meta_cols = ["add_date", "ticker"]
price_cols = [c for c in df.columns if c not in meta_cols]

# -------------------
# Normalize to returns relative to t+1
# -------------------
df_perf = df.copy()
P0 = df[price_cols[0]]  # first price = t+1
for c in price_cols:
    df_perf[c] = (df[c] / P0) - 1

# -------------------
# Fixed horizon analysis (approx 21 trading days per month)
# -------------------
months_map = {
    "1m": 21,
    "2m": 42,
    "3m": 63,
    "4m": 84,
    "5m": 105,
    "6m": 126
}

results = []

for label, day in months_map.items():
    col_name = f"t+{day}"
    if col_name in df_perf.columns:
        tmp = df_perf[["ticker", col_name]].copy()
        tmp.rename(columns={col_name: "return"}, inplace=True)
        tmp["horizon"] = label
        results.append(tmp)

perf_long = pd.concat(results)

# Mean return per horizon
mean_perf = perf_long.groupby("horizon")["return"].mean()

# -------------------
# Full average performance curve
# -------------------
avg_curve = df_perf[price_cols].mean(axis=0)

# -------------------
# Plotting
# -------------------

# 1. Snapshot mean returns bar chart
plt.figure(figsize=(8,5))
mean_perf.plot(kind="bar")
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.ylabel("Average Return")
plt.title("Average Return at Fixed Horizons")
plt.show()

# 2. Distribution boxplots
plt.figure(figsize=(8,5))
perf_long.boxplot(by="horizon", column="return", grid=False)
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.ylabel("Return")
plt.title("Return Distribution by Horizon")
plt.suptitle("")  # remove default pandas title
plt.show()

# 3. Full performance curve (average cumulative return path)
plt.figure(figsize=(10,6))
avg_curve.plot()
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.ylabel("Average Return")
plt.xlabel("Days Since Add Date")
plt.title("Average Performance Curve Across All Names")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# -------------------
# Load data
# -------------------
df = pd.read_csv("your_file.csv")

# -------------------
# Identify columns
# -------------------
meta_cols = df.columns[:8].tolist()          # first 8 metadata columns
price_cols = df.columns[8:].tolist()         # from Unnamed:8 onwards (prices)

# -------------------
# Normalize to returns relative to t0 (add date price)
# -------------------
df_perf = df.copy()
P0 = df[price_cols[0]]   # price at add date (t0)

for c in price_cols:
    df_perf[c] = (df[c] / P0) - 1

# -------------------
# Fixed horizon analysis (approx 21 trading days per month)
# -------------------
months_map = {
    "1m": 21,
    "2m": 42,
    "3m": 63,
    "4m": 84,
    "5m": 105,
    "6m": 126
}

results = []

for label, day in months_map.items():
    # price_cols[0] is t0, so day offset = price_cols[day]
    if day < len(price_cols):  
        col_name = price_cols[day]  
        tmp = df_perf[[meta_cols[1], col_name]].copy()  # ticker + return
        tmp.rename(columns={col_name: "return"}, inplace=True)
        tmp["horizon"] = label
        results.append(tmp)

perf_long = pd.concat(results)

# Mean return per horizon
mean_perf = perf_long.groupby("horizon")["return"].mean()

# -------------------
# Full average performance curve
# -------------------
avg_curve = df_perf[price_cols].mean(axis=0)

# -------------------
# Plotting
# -------------------

# 1. Snapshot mean returns bar chart
plt.figure(figsize=(8,5))
mean_perf.plot(kind="bar")
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.ylabel("Average Return")
plt.title("Average Return at Fixed Horizons")
plt.show()

# 2. Distribution boxplots
plt.figure(figsize=(8,5))
perf_long.boxplot(by="horizon", column="return", grid=False)
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.ylabel("Return")
plt.title("Return Distribution by Horizon")
plt.suptitle("")  # remove default pandas title
plt.show()

# 3. Full performance curve (average cumulative return path)
plt.figure(figsize=(10,6))
avg_curve.plot()
plt.axhline(0, color="black", linestyle="--", linewidth=1)
plt.ylabel("Average Return")
plt.xlabel("Days Since Add Date (t0)")
plt.title("Average Performance Curve Across All Names")
plt.show()
