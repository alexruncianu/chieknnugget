


# ================================================================
# DCC £600mn Tender Offer — Multi-Index Scenario Analysis with CSV export, discounts & selected indexes
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# -----------------------------
# Step 0: Specify selected indexes (empty = all indexes)
# -----------------------------
selected_indexes = ['ASX', 'UKX']  # put empty list [] to include all indexes

# -----------------------------
# Step 1: Load vertical CSV
# -----------------------------
file_path = "../Tender_Offer_Analysis /DCC_Data.csv"  # note the space after folder
df = pd.read_csv(file_path)

# Convert vertical layout into dictionary
data = dict(zip(df['Metric'], df['Value']))

# -----------------------------
# Step 2: Extract company fundamentals
# -----------------------------
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])          # in £
mcap = float(data['CUR_MKT_CAP'])                  # in £
shares_out = float(data['EQY_SH_OUT'])             # number of shares
px_last_pence = float(data['PX_LAST'])             # in pence
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])  # shares
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100   # fraction

# Convert PX_LAST to pounds
px_last = px_last_pence / 100

# -----------------------------
# Step 3: Identify index weights dynamically
# -----------------------------
fundamentals = ['TICKER','TENDER_OFFER','CUR_MKT_CAP','EQY_SH_OUT','PX_LAST',
                '20_DAY_AVERAGE_VOLUME_AT_TIME','EQY_FREE_FLOAT_PCT']

index_metrics = [k for k in data.keys() if k not in fundamentals]

# Filter for selected indexes
if selected_indexes:
    index_metrics = [idx for idx in index_metrics if idx in selected_indexes]

# Convert percentages to fractions
index_weights = {idx: float(data[idx])/100 for idx in index_metrics}

# -----------------------------
# Step 4: Scenario Analysis including discounts
# -----------------------------
premiums = [-0.05, 0.0, 0.05, 0.10, 0.15]  # include -5% discount
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)
    shares_redeemed = tender_value / tender_price
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity
    volume_multiple = shares_redeemed / avg_vol

    # 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    # Index weight changes
    new_index_weights = {}
    index_changes = {}
    for idx, weight_frac in index_weights.items():
        new_weight = weight_frac * (new_mcap * new_free_float) / (mcap * free_float)
        change_pct = (new_weight - weight_frac) / weight_frac * 100
        new_index_weights[idx] = new_weight
        index_changes[idx] = change_pct

    # Combine results
    scenario_result = {
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Free Float Change (%)": round(float_change_pct,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    }

    # Add dynamic index columns
    for idx in index_metrics:
        scenario_result[f"{idx} New Weight (%)"] = round(new_index_weights[idx]*100,5)
        scenario_result[f"{idx} Change (%)"] = round(index_changes[idx],3)

    scenarios.append(scenario_result)

# -----------------------------
# Step 5: Create DataFrame
# -----------------------------
scenarios_df = pd.DataFrame(scenarios)

# -----------------------------
# Step 6: Display nicely in Jupyter
# -----------------------------
pd.options.display.float_format = '{:,.2f}'.format
display(scenarios_df)

# Highlight negative changes in red
def highlight_negative(val):
    try:
        return 'color: red' if float(val) < 0 else 'color: green'
    except:
        return ''

styled_df = scenarios_df.style.applymap(highlight_negative, subset=[col for col in scenarios_df.columns if 'Change' in col])
display(styled_df)

# -----------------------------
# Step 7: Export to CSV
# -----------------------------
output_path = "../Tender_Offer_Analysis /DCC_Tender_Scenarios.csv"
scenarios_df.to_csv(output_path, index=False)
print(f"Scenario table exported to {output_path}")

# -----------------------------
# Step 8: Visualization
# -----------------------------
# Bar chart for share reduction
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title(f"{ticker} £{tender_value/1e6:.0f}mn Tender Offer — Share Reduction by Premium")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

# Heatmap for selected index weight changes
index_change_cols = [col for col in scenarios_df.columns if 'Change (%)' in col and col not in ['Share Reduction (%)','Market Cap Change (%)','Free Float Change (%)']]
plt.figure(figsize=(10,len(premiums)*0.7+2))
sns.heatmap(scenarios_df[index_change_cols], annot=True, fmt=".2f", cmap="coolwarm", cbar_kws={'label':'% Change'})
plt.title(f"{ticker} — Selected Index Weight Changes by Tender Premium")
plt.xlabel("Index")
plt.ylabel("Scenario (Premium)")
plt.show()

print("Analysis complete.")




# ================================================================
# DCC £600mn Tender Offer — Multi-Index Scenario Analysis with CSV export & discounts
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# -----------------------------
# Step 1: Load vertical CSV
# -----------------------------
file_path = "../Tender_Offer_Analysis /DCC_Data.csv"  # note the space after folder
df = pd.read_csv(file_path)

# Convert vertical layout into dictionary
data = dict(zip(df['Metric'], df['Value']))

# -----------------------------
# Step 2: Extract company fundamentals
# -----------------------------
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])          # in £
mcap = float(data['CUR_MKT_CAP'])                  # in £
shares_out = float(data['EQY_SH_OUT'])             # number of shares
px_last_pence = float(data['PX_LAST'])             # in pence
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])  # shares
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100   # fraction

# Convert PX_LAST to pounds
px_last = px_last_pence / 100

# -----------------------------
# Step 3: Identify index weights dynamically
# -----------------------------
fundamentals = ['TICKER','TENDER_OFFER','CUR_MKT_CAP','EQY_SH_OUT','PX_LAST',
                '20_DAY_AVERAGE_VOLUME_AT_TIME','EQY_FREE_FLOAT_PCT']

index_metrics = [k for k in data.keys() if k not in fundamentals]
# Convert percentages to fractions
index_weights = {idx: float(data[idx])/100 for idx in index_metrics}

# -----------------------------
# Step 4: Scenario Analysis including discounts
# -----------------------------
premiums = [-0.05, 0.0, 0.05, 0.10, 0.15]  # include -5% discount
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)
    shares_redeemed = tender_value / tender_price
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity
    volume_multiple = shares_redeemed / avg_vol

    # 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    # Index weight changes
    new_index_weights = {}
    index_changes = {}
    for idx, weight_frac in index_weights.items():
        new_weight = weight_frac * (new_mcap * new_free_float) / (mcap * free_float)
        change_pct = (new_weight - weight_frac) / weight_frac * 100
        new_index_weights[idx] = new_weight
        index_changes[idx] = change_pct

    # Combine results
    scenario_result = {
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Free Float Change (%)": round(float_change_pct,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    }

    # Add dynamic index columns
    for idx in index_metrics:
        scenario_result[f"{idx} New Weight (%)"] = round(new_index_weights[idx]*100,5)
        scenario_result[f"{idx} Change (%)"] = round(index_changes[idx],3)

    scenarios.append(scenario_result)

# -----------------------------
# Step 5: Create DataFrame
# -----------------------------
scenarios_df = pd.DataFrame(scenarios)

# -----------------------------
# Step 6: Display nicely in Jupyter
# -----------------------------
pd.options.display.float_format = '{:,.2f}'.format
display(scenarios_df)

# Highlight negative changes in red
def highlight_negative(val):
    try:
        return 'color: red' if float(val) < 0 else 'color: green'
    except:
        return ''

styled_df = scenarios_df.style.applymap(highlight_negative, subset=[col for col in scenarios_df.columns if 'Change' in col])
display(styled_df)

# -----------------------------
# Step 7: Export to CSV
# -----------------------------
output_path = "../Tender_Offer_Analysis /DCC_Tender_Scenarios.csv"
scenarios_df.to_csv(output_path, index=False)
print(f"Scenario table exported to {output_path}")

# -----------------------------
# Step 8: Visualization
# -----------------------------
# Bar chart for share reduction
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title(f"{ticker} £{tender_value/1e6:.0f}mn Tender Offer — Share Reduction by Premium")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

# Heatmap for index weight changes
index_change_cols = [col for col in scenarios_df.columns if 'Change (%)' in col and col not in ['Share Reduction (%)','Market Cap Change (%)','Free Float Change (%)']]
plt.figure(figsize=(10,len(premiums)*0.7+2))
sns.heatmap(scenarios_df[index_change_cols], annot=True, fmt=".2f", cmap="coolwarm", cbar_kws={'label':'% Change'})
plt.title(f"{ticker} — Index Weight Changes by Tender Premium")
plt.xlabel("Index")
plt.ylabel("Scenario (Premium)")
plt.show()

print("Analysis complete.")



# ================================================================
# DCC £600mn Tender Offer — Full Scenario Analysis with Export & Visualization
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# -----------------------------
# Step 1: Load vertical CSV
# -----------------------------
file_path = "../Tender_Offer_Analysis/DCC_Data.csv"
df = pd.read_csv(file_path)

# Convert vertical layout into dictionary
data = dict(zip(df['Metric'], df['Value']))

# -----------------------------
# Step 2: Extract company fundamentals
# -----------------------------
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])          # in £
mcap = float(data['CUR_MKT_CAP'])                  # in £
shares_out = float(data['EQY_SH_OUT'])             # number of shares
px_last_pence = float(data['PX_LAST'])             # in pence
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])  # shares
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100   # fraction

# Convert PX_LAST to pounds
px_last = px_last_pence / 100

# -----------------------------
# Step 3: Identify index weights dynamically
# -----------------------------
fundamentals = ['TICKER','TENDER_OFFER','CUR_MKT_CAP','EQY_SH_OUT','PX_LAST',
                '20_DAY_AVERAGE_VOLUME_AT_TIME','EQY_FREE_FLOAT_PCT']

index_metrics = [k for k in data.keys() if k not in fundamentals]
# Convert percentages to fractions
index_weights = {idx: float(data[idx])/100 for idx in index_metrics}

# -----------------------------
# Step 4: Scenario Analysis
# -----------------------------
premiums = [0.0, 0.05, 0.10, 0.15]  # 0%, 5%, 10%, 15%
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)
    shares_redeemed = tender_value / tender_price
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity
    volume_multiple = shares_redeemed / avg_vol

    # 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    # Index weight changes
    new_index_weights = {}
    index_changes = {}
    for idx, weight_frac in index_weights.items():
        new_weight = weight_frac * (new_mcap * new_free_float) / (mcap * free_float)
        change_pct = (new_weight - weight_frac) / weight_frac * 100
        new_index_weights[idx] = new_weight
        index_changes[idx] = change_pct

    # Combine results
    scenario_result = {
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Free Float Change (%)": round(float_change_pct,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    }

    # Add dynamic index columns
    for idx in index_metrics:
        scenario_result[f"{idx} New Weight (%)"] = round(new_index_weights[idx]*100,5)
        scenario_result[f"{idx} Change (%)"] = round(index_changes[idx],3)

    scenarios.append(scenario_result)

# -----------------------------
# Step 5: Create DataFrame
# -----------------------------
scenarios_df = pd.DataFrame(scenarios)

# -----------------------------
# Step 6: Display nicely in Jupyter
# -----------------------------
pd.options.display.float_format = '{:,.2f}'.format
display(scenarios_df)

# Highlight negative changes in red
def highlight_negative(val):
    try:
        return 'color: red' if float(val) < 0 else 'color: green'
    except:
        return ''

styled_df = scenarios_df.style.applymap(highlight_negative, subset=[col for col in scenarios_df.columns if 'Change' in col])
display(styled_df)

# -----------------------------
# Step 7: Export to Excel
# -----------------------------
output_path = "../Tender_Offer_Analysis/DCC_Tender_Scenarios.xlsx"
scenarios_df.to_excel(output_path, index=False)
print(f"Scenario table exported to {output_path}")

# -----------------------------
# Step 8: Visualization
# -----------------------------
# Bar chart for share reduction
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title(f"{ticker} £{tender_value/1e6:.0f}mn Tender Offer — Share Reduction by Premium")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

# Heatmap for index weight changes
index_change_cols = [col for col in scenarios_df.columns if 'Change (%)' in col and col not in ['Share Reduction (%)','Market Cap Change (%)','Free Float Change (%)']]
plt.figure(figsize=(10,len(premiums)*0.7+2))
sns.heatmap(scenarios_df[index_change_cols], annot=True, fmt=".2f", cmap="coolwarm", cbar_kws={'label':'% Change'})
plt.title(f"{ticker} — Index Weight Changes by Tender Premium")
plt.xlabel("Index")
plt.ylabel("Scenario (Premium)")
plt.show()

print("Analysis complete.")



# ================================================================
# DCC £600mn Tender Offer — Multi-Index Scenario Analysis (Percent Weights)
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Step 1: Load vertical CSV ---
file_path = "../Tender_Offer_Analysis/DCC_Data.csv"
df = pd.read_csv(file_path)

# Convert vertical layout into dictionary
data = dict(zip(df['Metric'], df['Value']))

# --- Step 2: Extract base company values ---
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])          # in £
mcap = float(data['CUR_MKT_CAP'])                  # in £
shares_out = float(data['EQY_SH_OUT'])             # number of shares
px_last_pence = float(data['PX_LAST'])             # in pence
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])  # shares
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100   # fraction

# Convert PX_LAST to pounds
px_last = px_last_pence / 100

# --- Step 3: Identify index weights dynamically ---
fundamentals = ['TICKER','TENDER_OFFER','CUR_MKT_CAP','EQY_SH_OUT','PX_LAST',
                '20_DAY_AVERAGE_VOLUME_AT_TIME','EQY_FREE_FLOAT_PCT']

# Indexes = any metric not in fundamentals
index_metrics = [k for k in data.keys() if k not in fundamentals]

# Convert percentages to fractions for calculations
index_weights = {idx: float(data[idx])/100 for idx in index_metrics}

# --- Step 4: Scenario Analysis for Different Premiums ---
premiums = [0.0, 0.05, 0.10, 0.15]  # 0%, 5%, 10%, 15%
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)                        # £ per share
    shares_redeemed = tender_value / tender_price           # shares repurchased
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Adjusted market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Adjust free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity proxy: days of average 20-day volume
    volume_multiple = shares_redeemed / avg_vol

    # FTSE 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    # Index weight changes
    new_index_weights = {}
    index_changes = {}
    for idx, weight_frac in index_weights.items():
        new_weight = weight_frac * (new_mcap * new_free_float) / (mcap * free_float)
        change_pct = (new_weight - weight_frac) / weight_frac * 100
        new_index_weights[idx] = new_weight
        index_changes[idx] = change_pct

    # Combine results
    scenario_result = {
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Free Float Change (%)": round(float_change_pct,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    }

    # Add dynamic index columns
    for idx in index_metrics:
        scenario_result[f"{idx} New Weight (%)"] = round(new_index_weights[idx]*100,5)
        scenario_result[f"{idx} Change (%)"] = round(index_changes[idx],3)

    scenarios.append(scenario_result)

# --- Step 5: Display results ---
scenarios_df = pd.DataFrame(scenarios)
print(f"\n{ticker} — £{tender_value/1e6:.0f}mn Tender Offer Scenario Analysis with Multiple Indexes\n")
display(scenarios_df)

# --- Step 6: Simple Visualization of Share Reduction ---
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title(f"{ticker} £{tender_value/1e6:.0f}mn Tender Offer — Share Reduction by Premium")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

print("Analysis complete.")



# ================================================================
# DCC £600mn Tender Offer — Multi-Index Scenario Analysis (Percent Weights)
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Step 1: Load vertical CSV ---
file_path = "../Tender_Offer_Analysis/DCC_Data.csv"
df = pd.read_csv(file_path)

# Convert vertical layout into dictionary
data = dict(zip(df['Metric'], df['Value']))

# --- Step 2: Extract base company values ---
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])          # in £
mcap = float(data['CUR_MKT_CAP'])                  # in £
shares_out = float(data['EQY_SH_OUT'])             # number of shares
px_last_pence = float(data['PX_LAST'])             # in pence
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])  # shares
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100   # fraction

# Convert PX_LAST to pounds
px_last = px_last_pence / 100

# --- Step 3: Identify index weights dynamically ---
fundamentals = ['TICKER','TENDER_OFFER','CUR_MKT_CAP','EQY_SH_OUT','PX_LAST',
                '20_DAY_AVERAGE_VOLUME_AT_TIME','EQY_FREE_FLOAT_PCT']

# Indexes = any metric not in fundamentals
index_metrics = [k for k in data.keys() if k not in fundamentals]

# Convert percentages to fractions for calculations
index_weights = {idx: float(data[idx])/100 for idx in index_metrics}

# --- Step 4: Scenario Analysis for Different Premiums ---
premiums = [0.0, 0.05, 0.10, 0.15]  # 0%, 5%, 10%, 15%
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)                        # £ per share
    shares_redeemed = tender_value / tender_price           # shares repurchased
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Adjusted market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Adjust free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity proxy: days of average 20-day volume
    volume_multiple = shares_redeemed / avg_vol

    # FTSE 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    # Index weight changes
    new_index_weights = {}
    index_changes = {}
    for idx, weight_frac in index_weights.items():
        new_weight = weight_frac * (new_mcap * new_free_float) / (mcap * free_float)
        change_pct = (new_weight - weight_frac) / weight_frac * 100
        new_index_weights[idx] = new_weight
        index_changes[idx] = change_pct

    # Combine results
    scenario_result = {
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Free Float Change (%)": round(float_change_pct,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    }

    # Add dynamic index columns
    for idx in index_metrics:
        scenario_result[f"{idx} New Weight (%)"] = round(new_index_weights[idx]*100,5)
        scenario_result[f"{idx} Change (%)"] = round(index_changes[idx],3)

    scenarios.append(scenario_result)

# --- Step 5: Display results ---
scenarios_df = pd.DataFrame(scenarios)
print(f"\n{ticker} — £{tender_value/1e6:.0f}mn Tender Offer Scenario Analysis with Multiple Indexes


# ================================================================
# DCC £600mn Tender Offer — Scenario Analysis with Multiple Indexes
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Step 1: Load vertical CSV ---
file_path = "../Tender_Offer_Analysis/DCC_Data.csv"
df = pd.read_csv(file_path)

# Convert vertical layout into dictionary using exact column names
data = dict(zip(df['Metric'], df['Value']))

# --- Step 2: Extract base company values ---
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])
mcap = float(data['CUR_MKT_CAP'])
shares_out = float(data['EQY_SH_OUT'])
px_last_pence = float(data['PX_LAST'])
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100

# Convert PX_LAST to pounds
px_last = px_last_pence / 100

# --- Step 3: Identify index weights dynamically ---
fundamentals = ['TICKER','TENDER_OFFER','CUR_MKT_CAP','EQY_SH_OUT','PX_LAST',
                '20_DAY_AVERAGE_VOLUME_AT_TIME','EQY_FREE_FLOAT_PCT']

# Indexes = any metric not in fundamentals
index_metrics = [k for k in data.keys() if k not in fundamentals]
index_weights = {idx: float(data[idx]) for idx in index_metrics}

# --- Step 4: Scenario Analysis for Different Premiums ---
premiums = [0.0, 0.05, 0.10, 0.15]  # 0%, 5%, 10%, 15%
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)
    shares_redeemed = tender_value / tender_price
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Adjusted market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Adjust free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity proxy: days of average volume
    volume_multiple = shares_redeemed / avg_vol

    # FTSE 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    # Index weight changes
    new_index_weights = {}
    index_changes = {}
    for idx, weight in index_weights.items():
        new_weight = weight * (new_mcap * new_free_float) / (mcap * free_float)
        change_pct = (new_weight - weight) / weight * 100
        new_index_weights[idx] = new_weight
        index_changes[idx] = change_pct

    # Combine results
    scenario_result = {
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Free Float Change (%)": round(float_change_pct,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    }

    # Add dynamic index columns
    for idx in index_metrics:
        scenario_result[f"{idx} New Weight (%)"] = round(new_index_weights[idx]*100,3)
        scenario_result[f"{idx} Change (%)"] = round(index_changes[idx],2)

    scenarios.append(scenario_result)

# --- Step 5: Display results ---
scenarios_df = pd.DataFrame(scenarios)
print(f"\n{ticker} — £{tender_value/1e6:.0f}mn Tender Offer Scenario Analysis with Index Weights\n")
display(scenarios_df)

# --- Step 6: Simple Visualization of Share Reduction ---
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title(f"{ticker} £{tender_value/1e6:.0f}mn Tender Offer — Share Reduction by Premium")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

print("Analysis complete.")


# ================================================================
# DCC £600mn Tender Offer — Scenario Analysis (Capitalized CSV)
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Step 1: Load vertical CSV ---
file_path = "../Tender_Offer_Analysis/DCC_Data.csv"
df = pd.read_csv(file_path)

# Check column names
print("Columns in CSV:", df.columns.tolist())

# Convert vertical layout into dictionary using exact column names
data = dict(zip(df['Metric'], df['Value']))

# --- Step 2: Extract base values ---
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])
mcap = float(data['CUR_MKT_CAP'])
shares_out = float(data['EQY_SH_OUT'])
px_last = float(data['PX_LAST'])
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100

# --- Step 3: Scenario Analysis for Different Premiums ---
premiums = [0.0, 0.05, 0.10, 0.15]  # 0%, +5%, +10%, +15%
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)
    shares_redeemed = tender_value / tender_price
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Adjusted market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Adjust free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity proxy: days of average volume
    volume_multiple = shares_redeemed / avg_vol

    # FTSE 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    scenarios.append({
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    })

# --- Step 4: Display results ---
scenarios_df = pd.DataFrame(scenarios)
print(f"\n{ticker} — £{tender_value/1e6:.0f}mn Tender Offer Scenario Analysis\n")
display(scenarios_df)

# --- Step 5: Simple Visualization ---
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title(f"{ticker} £{tender_value/1e6:.0f}mn Tender Offer — Share Reduction by Premium")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

print("Analysis complete.")




# ================================================================
# DCC £600mn Tender Offer — Vertical CSV Layout Scenario Analysis
# ================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Step 1: Load vertical CSV ---
file_path = "../Tender_Offer_Analysis/DCC_Data.csv"
df = pd.read_csv(file_path)

# Convert vertical layout into dictionary
data = dict(zip(df['Metric'], df['Value']))

# --- Step 2: Extract base values ---
ticker = data.get('TICKER', 'DCC')
tender_value = float(data['TENDER_OFFER'])
mcap = float(data['CUR_MKT_CAP'])
shares_out = float(data['EQY_SH_OUT'])
px_last = float(data['PX_LAST'])
avg_vol = float(data['20_DAY_AVERAGE_VOLUME_AT_TIME'])
free_float = float(data['EQY_FREE_FLOAT_PCT']) / 100

# --- Step 3: Scenario Analysis for Different Premiums ---
premiums = [0.0, 0.05, 0.10, 0.15]  # 0%, +5%, +10%, +15%
scenarios = []

for p in premiums:
    tender_price = px_last * (1 + p)
    shares_redeemed = tender_value / tender_price
    new_shares = shares_out - shares_redeemed
    share_reduction_pct = shares_redeemed / shares_out * 100

    # Adjusted market cap
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - mcap) / mcap * 100

    # Adjust free float
    new_free_float = free_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_free_float - free_float) / free_float * 100

    # Liquidity proxy: days of average volume
    volume_multiple = shares_redeemed / avg_vol

    # FTSE 25% free float threshold
    below_threshold = new_free_float * 100 < 25

    scenarios.append({
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price,2),
        "Shares Repurchased (mn)": round(shares_redeemed/1e6,2),
        "Share Reduction (%)": round(share_reduction_pct,2),
        "New Market Cap (£bn)": round(new_mcap/1e9,2),
        "Market Cap Change (%)": round(mcap_change_pct,2),
        "New Free Float (%)": round(new_free_float*100,2),
        "Days of Volume Tendered": round(volume_multiple,1),
        "Below 25% Threshold?": "Yes" if below_threshold else "No"
    })

# --- Step 4: Display results ---
scenarios_df = pd.DataFrame(scenarios)
print(f"\n{ticker} — £{tender_value/1e6:.0f}mn Tender Offer Scenario Analysis\n")
display(scenarios_df)

# --- Step 5: Simple Visualization ---
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title(f"{ticker} £{tender_value/1e6:.0f}mn Tender Offer — Share Reduction by Premium")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

print("Analysis complete.")


# ================================================================
# DCC £600mn Tender Offer — Forward-Looking Scenario Analysis
# ================================================================
# PURPOSE:
# This script models the potential impact of DCC's announced £600mn tender offer
# (expected to occur later this year) on:
#   1. Market capitalisation
#   2. Shares outstanding
#   3. Free float percentage
#   4. FTSE index weight (approximate)
#
# You only need to provide a *current snapshot* of company data in a CSV file.
#
# ================================================================
# REQUIRED INPUT FILE (exact format)
# ================================================================
# Save a CSV file named: dcc_snapshot.csv
#
# Columns (headers exactly as shown, one row only):
#   PX_LAST,MarketCap,SharesOut,FreeFloat,IndexWeight
#
# Example:
#   4725,5000000000,98000000,85,0.23
#
# Notes:
# - PX_LAST: Current share price in £
# - MarketCap: Current total market capitalisation in GBP
# - SharesOut: Current total shares outstanding
# - FreeFloat: Free float percentage (e.g. 85 for 85%)
# - IndexWeight: Current FTSE index weight in % (optional but recommended)
#
# Then run this cell and upload the CSV when prompted.
# ================================================================

import pandas as pd
import numpy as np
from IPython.display import display
from ipywidgets import FileUpload
import io
import matplotlib.pyplot as plt

# --- Step 1: Upload CSV ---
print("Upload your 'dcc_snapshot.csv' file below (1 row of current data).")
uploader = FileUpload(accept='.csv', multiple=False)
display(uploader)

def load_uploaded_file(uploader):
    if len(uploader.value) == 0:
        raise ValueError("No file uploaded. Please upload your 'dcc_snapshot.csv' file.")
    upload = list(uploader.value.values())[0]
    df = pd.read_csv(io.BytesIO(upload['content']))
    print(f"Loaded: {upload['metadata']['name']}")
    return df

if len(uploader.value) == 0:
    raise SystemExit("Upload your CSV file above, then re-run this cell.")

df = load_uploaded_file(uploader)

# --- Step 2: Extract Base Data ---
base = df.iloc[0]
base_price = base['PX_LAST']
base_mcap = base['MarketCap']
base_shares = base['SharesOut']
base_float = base['FreeFloat'] / 100
base_index_weight = base.get('IndexWeight', np.nan)

tender_value = 600_000_000  # £600mn

# --- Step 3: Define Tender Price Scenarios ---
premiums = [0.0, 0.05, 0.10, 0.15]  # No premium, +5%, +10%, +15%
scenarios = []

for p in premiums:
    tender_price = base_price * (1 + p)
    shares_redeemed = tender_value / tender_price
    new_shares = base_shares - shares_redeemed
    share_reduction_pct = shares_redeemed / base_shares * 100

    # Adjusted market cap after tender (using tender price)
    new_mcap = tender_price * new_shares
    mcap_change_pct = (new_mcap - base_mcap) / base_mcap * 100

    # Adjust free float proportionally
    new_float = base_float * (1 - share_reduction_pct / 100)
    float_change_pct = (new_float - base_float) / base_float * 100

    # Adjust FTSE weight proportionally
    if not np.isnan(base_index_weight):
        new_index_weight = base_index_weight * (new_mcap / base_mcap) * (new_float / base_float)
        index_change_pct = (new_index_weight - base_index_weight) / base_index_weight * 100
    else:
        new_index_weight = np.nan
        index_change_pct = np.nan

    # Flag if free float falls below FTSE minimum (25%)
    below_threshold = new_float * 100 < 25

    scenarios.append({
        "Tender Premium": f"{int(p*100)}%",
        "Tender Price (£)": round(tender_price, 2),
        "Shares Repurchased (mn)": round(shares_redeemed / 1e6, 2),
        "Share Reduction (%)": round(share_reduction_pct, 2),
        "New Market Cap (£bn)": round(new_mcap / 1e9, 2),
        "Market Cap Change (%)": round(mcap_change_pct, 2),
        "New Free Float (%)": round(new_float * 100, 2),
        "Below 25% Threshold?": "Yes" if below_threshold else "No",
        "New Index Weight (%)": round(new_index_weight, 3) if not np.isnan(new_index_weight) else None,
        "Index Weight Change (%)": round(index_change_pct, 2) if not np.isnan(index_change_pct) else None
    })

scenarios_df = pd.DataFrame(scenarios)
display(scenarios_df)

# --- Step 4: Simple Visualisation ---
plt.figure(figsize=(8,5))
plt.bar(scenarios_df["Tender Premium"], scenarios_df["Share Reduction (%)"], color='steelblue')
plt.title("DCC Tender Offer — Share Reduction by Premium Scenario")
plt.xlabel("Tender Premium")
plt.ylabel("Share Reduction (%)")
plt.grid(True, axis='y')
plt.show()

print("Scenario analysis complete.")

# ================================================================
# 📊 DCC Tender Offer Analysis — All-in-One Jupyter Notebook Code
# ================================================================
# PURPOSE:
# Analyse the £600mn DCC tender offer (Nov–Dec 2024) to estimate
# share repurchase impact, market cap effects, and FTSE index implications.
#
# INSTRUCTIONS:
# 1️⃣ Export daily data from Bloomberg for DCC LN Equity (and optionally FTSE 100).
#    Include at least Aug 2024 – Feb 2025.
# 2️⃣ Save as Excel file named 'dcc_tender.xlsx' with the following columns:
#       Date          - Date (YYYY-MM-DD)
#       PX_LAST       - Closing price
#       VOLUME        - Daily trading volume
#       MarketCap     - Market cap in GBP
#       SharesOut     - Shares outstanding
#       FreeFloat     - Free float percentage
#       IndexWeight   - (optional) FTSE membership weight (%)
#       FTSE100       - (optional) FTSE 100 closing value
# 3️⃣ Run this notebook cell, upload the file when prompted, and the analysis will run.

# ================================================================
# 🧩 Import Libraries
# ================================================================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from IPython.display import display
from ipywidgets import FileUpload
import io

# ================================================================
# 📁 Upload Bloomberg Excel File
# ================================================================
print("📂 Please upload your Bloomberg Excel file (e.g. dcc_tender.xlsx)")
uploader = FileUpload(accept='.xlsx', multiple=False)
display(uploader)

def load_uploaded_file(uploader):
    if len(uploader.value) == 0:
        raise ValueError("❌ No file uploaded. Please upload your .xlsx file.")
    upload = list(uploader.value.values())[0]
    df = pd.read_excel(io.BytesIO(upload['content']))
    print(f"✅ Loaded: {upload['metadata']['name']} — {df.shape[0]} rows")
    return df

# --- Wait for upload, then rerun this cell ---
if len(uploader.value) == 0:
    raise SystemExit("⏸️ Upload your Excel file above, then re-run this cell.")

# ================================================================
# 🧮 Load and Prepare Data
# ================================================================
df = load_uploaded_file(uploader)
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')
df.set_index('Date', inplace=True)

# ================================================================
# ⚙️ Tender Offer Parameters
# ================================================================
tender_value = 600_000_000   # £600mn
tender_start = datetime(2024, 11, 1)
tender_end = datetime(2024, 12, 31)

# ================================================================
# 📈 Derived Metrics
# ================================================================
df['PriceChange_%'] = df['PX_LAST'].pct_change() * 100
df['MarketCapChange_%'] = df['MarketCap'].pct_change() * 100

# --- Estimate Shares Redeemed ---
avg_tender_price = df.loc[tender_start:tender_end, 'PX_LAST'].mean()
shares_redeemed = tender_value / avg_tender_price

df['Adj_SharesOut'] = df['SharesOut']
df.loc[df.index >= tender_end, 'Adj_SharesOut'] = (
    df.loc[df.index >= tender_end, 'SharesOut'] - shares_redeemed
)
df['Adj_MarketCap'] = df['PX_LAST'] * df['Adj_SharesOut']

# --- Recalculate Index Weight (if available) ---
if 'IndexWeight' in df.columns:
    df['Adj_IndexWeight'] = df['Adj_MarketCap'] / df['Adj_MarketCap'].sum() * 100
else:
    df['Adj_IndexWeight'] = np.nan

# --- FTSE100 Comparison (optional) ---
if 'FTSE100' in df.columns:
    df['FTSE_Return_%'] = df['FTSE100'].pct_change() * 100
    df['Rel_Perf_%'] = df['PriceChange_%'] - df['FTSE_Return_%']

# ================================================================
# 🧠 Summary Statistics
# ================================================================
summary = {
    "Avg Tender Price (£)": round(avg_tender_price, 2),
    "Est. Shares Repurchased (mn)": round(shares_redeemed / 1e6, 2),
    "Share Reduction (%)": round(shares_redeemed / df['SharesOut'].iloc[-1] * 100, 2),
    "Pre-Tender Market Cap (£bn)": round(df.loc[:tender_start, 'MarketCap'].iloc[-1] / 1e9, 2),
    "Post-Tender Market Cap (£bn)": round(df.loc[tender_end:, 'Adj_MarketCap'].iloc[0] / 1e9, 2),
}
display(pd.DataFrame(summary, index=["Summary"]))

# ================================================================
# 📊 Visualisations
# ================================================================
plt.figure(figsize=(10,5))
plt.plot(df.index, df['PX_LAST'], label="DCC Share Price")
plt.axvspan(tender_start, tender_end, color='orange', alpha=0.2, label="Tender Period")
plt.title("DCC Share Price vs Tender Offer Period")
plt.xlabel("Date"); plt.ylabel("Price (£)")
plt.legend(); plt.grid(True); plt.show()

plt.figure(figsize=(10,5))
plt.plot(df.index, df['MarketCap'] / 1e9, label="Reported Market Cap (£bn)", alpha=0.6)
plt.plot(df.index, df['Adj_MarketCap'] / 1e9, label="Adjusted Market Cap (£bn)", linewidth=2)
plt.axvspan(tender_start, tender_end, color='orange', alpha=0.2)
plt.title("Market Cap Impact (Adjusted for £600mn Tender)")
plt.xlabel("Date"); plt.ylabel("£ Billion")
plt.legend(); plt.grid(True); plt.show()

if 'FTSE100' in df.columns:
    plt.figure(figsize=(10,5))
    plt.plot(df.index, df['Rel_Perf_%'].cumsum(), label="Relative Perf. vs FTSE100")
    plt.axvspan(tender_start, tender_end, color='orange', alpha=0.2)
    plt.title("Cumulative Relative Performance vs FTSE 100")
    plt.xlabel("Date"); plt.ylabel("Cumulative %")
    plt.legend(); plt.grid(True); plt.show()

print("✅ Analysis complete.")



import bql
import pandas as pd

# ----------------------------------------
# Connect to BQL
# ----------------------------------------
bq = bql.Service()

# ----------------------------------------
# Bloomberg-like function wrappers (BQuant style)
# ----------------------------------------

# --- BDS: Bulk dataset (e.g., index members)
def bds(tkr, field):
    if field == "INDX_MEMBERS":
        req = bql.Request(tkr, {"members": bq.data.memberships()})
        df = bq.execute(req).as_df()
        return df
    else:
        raise NotImplementedError(f"BDS field {field} not yet implemented in this wrapper")

# --- BDP: Snapshot data
def bdp(tkrs, field):
    if isinstance(tkrs, str):
        tkrs = [tkrs]
    req = bql.Request(tkrs, {field: getattr(bq.data, field)()})
    df = bq.execute(req).as_df()
    return df.pivot(index="ticker", values=field)

# --- BDH: Historical time series
def bdh(tkrs, field, start, end):
    if isinstance(tkrs, str):
        tkrs = [tkrs]
    fld = getattr(bq.data, field)(dates=bq.func.range(start, end, "daily"))
    req = bql.Request(tkrs, {field: fld})
    df = bq.execute(req).as_df()
    return df.pivot(index="date", columns="ticker", values=field)

# ----------------------------------------
# Example usage
# ----------------------------------------

# 1. Get index members
basket = "SPX Index"   # replace with your custom basket
members = bds(basket, "INDX_MEMBERS")
print("Members:\n", members.head())

# 2. Get snapshot (e.g., last price)
px_last = bdp(["AAPL US Equity", "MSFT US Equity"], "px_last")
print("\nSnapshot prices:\n", px_last)

# 3. Get historical (e.g., daily closes)
hist = bdh(["AAPL US Equity", "MSFT US Equity"], "px_last", "2024-01-01", "2024-02-01")
print("\nHistorical prices:\n", hist.head())